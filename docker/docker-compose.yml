version: '3.5'

services:

  postgres:
    container_name: open-connect-db
    image: postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 60s
      interval: 10s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    volumes:
      - ./postgres:/data/postgres
      - ./db:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  keycloak:
    container_name: open-connect-keycloak
    image: quay.io/keycloak/keycloak:20.0.2
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KEYCLOAK_USER: ${KEYCLOAK_USER:-admin}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD:-admin}
    command: start-dev
    ports:
      - '8090:8080'
    depends_on:
      - postgres

  zookeeper:
    container_name: open-connect-zookeeper
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog

  kafka:
    container_name: open-connect-kafka
    image: confluentinc/cp-kafka:3.3.1
    hostname: kafka
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  prometheus:
    container_name: open-connect-prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    networks:
      - monitoring
    restart: unless-stopped

  sonarqube:
    container_name: open-connect-sonarqube
    image: sonarqube:8.9-community
    depends_on:
      - postgres
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar_teste
      SONAR_JDBC_USERNAME: ${POSTGRES_USER:-postgres}
      SONAR_JDBC_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - SonarQube_data:/opt/SonarQube/data
      - SonarQube_extensions:/opt/SonarQube/extensions
      - SonarQube_logs:/opt/SonarQube/logs
    ports:
      - "9000:9000"
    networks:
      - postgres
    restart: unless-stopped


  grafana:
    container_name: open-connect-grafana
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - '3000:3000'
    networks:
      - monitoring

  Elasticsearch:
    container_name: open-connect-elasticsearch
    image: elasticsearch:7.16.2
    restart: always
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
    ports:
      - '9092:9200'
      - '9093:9300'
    networks:
      - elk

  logstash:
    container_name: open-connect-logstash
    image: logstash:7.9.2
    ports:
      - '5000:5000'
    volumes:
      - type: bind
        source: ./logstash_pipeline/
        target: /usr/share/logstash/pipeline
        read_only: true
    networks:
      - elk

  Kibana:
    container_name: open-connect-kibana
    image: kibana:7.16.2
    restart: always
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - Elasticsearch
    networks:
      - elk

networks:
  postgres:
    driver: bridge
  monitoring:
    driver: bridge
  elk:
    driver: bridge  

volumes:
  postgres:
  prometheus_data:
  postgres:
  SonarQube_data:
  SonarQube_extensions:
  SonarQube_logs:
  grafana_data:
  elastic_data:
